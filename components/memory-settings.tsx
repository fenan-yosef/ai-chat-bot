"use client"

import { useState, useEffect, useCallback } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Brain, Edit3, Trash2, Plus, Save, X, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"

interface MemoryItem {
  id: string
  content: string
  category: string
  importance: number
  timestamp: string
  autoGenerated: boolean
}

interface MemorySettingsProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  userId: string | null
}

const categories = ["personal_info", "preferences", "goals", "relationships", "work", "interests", "other"]

const categoryColors = {
  personal_info: "bg-blue-100 text-blue-800",
  preferences: "bg-green-100 text-green-800",
  goals: "bg-purple-100 text-purple-800",
  relationships: "bg-pink-100 text-pink-800",
  work: "bg-orange-100 text-orange-800",
  interests: "bg-indigo-100 text-indigo-800",
  other: "bg-gray-100 text-gray-800",
}

export function MemorySettings({ open, onOpenChange, userId }: MemorySettingsProps) {
  const [memories, setMemories] = useState<MemoryItem[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [editingId, setEditingId] = useState<string | null>(null)
  const [editForm, setEditForm] = useState({
    content: "",
    category: "other",
    importance: 5,
  })
  const [showAddForm, setShowAddForm] = useState(false)

  // Memoize fetchMemories to prevent unnecessary re-renders
  const fetchMemories = useCallback(async () => {
    if (!userId) return

    setLoading(true)
    setError(null)

    try {
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout

      const response = await fetch(`/api/memory?userId=${userId}`, {
        signal: controller.signal,
      })

      clearTimeout(timeoutId)

      if (response.ok) {
        const data = await response.json()
        setMemories(data.memories || [])
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
    } catch (error: any) {
      console.error("Error fetching memories:", error)
      if (error.name === "AbortError") {
        setError("Request timed out. Please try again.")
      } else {
        setError("Failed to load memories. Please try again.")
      }
    } finally {
      setLoading(false)
    }
  }, [userId])

  useEffect(() => {
    if (open && userId) {
      fetchMemories()
    }
  }, [open, userId, fetchMemories])

  const saveMemories = async () => {
    if (!userId) return

    setLoading(true)
    setError(null)

    try {
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000)

      const response = await fetch("/api/memory", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, memories }),
        signal: controller.signal,
      })

      clearTimeout(timeoutId)

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
    } catch (error: any) {
      console.error("Error saving memories:", error)
      if (error.name === "AbortError") {
        setError("Save timed out. Please try again.")
      } else {
        setError("Failed to save memories. Please try again.")
      }
    } finally {
      setLoading(false)
    }
  }

  const startEdit = (memory: MemoryItem) => {
    setEditingId(memory.id)
    setEditForm({
      content: memory.content,
      category: memory.category,
      importance: memory.importance,
    })
  }

  const saveEdit = () => {
    setMemories(memories.map((m) => (m.id === editingId ? { ...m, ...editForm } : m)))
    setEditingId(null)
    saveMemories()
  }

  const cancelEdit = () => {
    setEditingId(null)
    setEditForm({ content: "", category: "other", importance: 5 })
  }

  const deleteMemory = (id: string) => {
    setMemories(memories.filter((m) => m.id !== id))
    saveMemories()
  }

  const addMemory = () => {
    const newMemory: MemoryItem = {
      id: Math.random().toString(36).substring(7),
      content: editForm.content,
      category: editForm.category,
      importance: editForm.importance,
      timestamp: new Date().toISOString(),
      autoGenerated: false,
    }
    setMemories([newMemory, ...memories])
    setShowAddForm(false)
    setEditForm({ content: "", category: "other", importance: 5 })
    saveMemories()
  }

  if (!userId) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Brain className="w-5 h-5" />
              Memory Settings
            </DialogTitle>
          </DialogHeader>
          <div className="text-center py-8">
            <p className="text-muted-foreground">Please sign in to manage your AI memory.</p>
          </div>
        </DialogContent>
      </Dialog>
    )
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-4xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5" />
            AI Memory Settings
          </DialogTitle>
          <p className="text-sm text-muted-foreground">
            Manage what the AI remembers about you for more personalized conversations.
          </p>
        </DialogHeader>

        <div className="space-y-4">
          {error && (
            <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 dark:bg-red-900/20 p-3 rounded-lg">
              <AlertCircle className="w-4 h-4" />
              {error}
              <Button onClick={fetchMemories} variant="outline" size="sm" className="ml-auto bg-transparent">
                Retry
              </Button>
            </div>
          )}

          <div className="flex justify-between items-center">
            <p className="text-sm text-muted-foreground">{memories.length} memories stored</p>
            <Button
              onClick={() => setShowAddForm(true)}
              size="sm"
              className="bg-gradient-to-r from-purple-500 to-blue-500"
              disabled={loading}
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Memory
            </Button>
          </div>

          {/* Add Memory Form */}
          <AnimatePresence>
            {showAddForm && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="border rounded-lg p-4 space-y-3"
              >
                <Input
                  placeholder="What should I remember about you?"
                  value={editForm.content}
                  onChange={(e) => setEditForm({ ...editForm, content: e.target.value })}
                />
                <div className="flex gap-2">
                  <select
                    value={editForm.category}
                    onChange={(e) => setEditForm({ ...editForm, category: e.target.value })}
                    className="px-3 py-2 border rounded-md"
                  >
                    {categories.map((cat) => (
                      <option key={cat} value={cat}>
                        {cat.replace("_", " ")}
                      </option>
                    ))}
                  </select>
                  <Input
                    type="number"
                    min="1"
                    max="10"
                    value={editForm.importance}
                    onChange={(e) => setEditForm({ ...editForm, importance: Number.parseInt(e.target.value) })}
                    className="w-20"
                    placeholder="1-10"
                  />
                  <Button onClick={addMemory} size="sm" disabled={loading}>
                    <Save className="w-4 h-4" />
                  </Button>
                  <Button onClick={() => setShowAddForm(false)} variant="outline" size="sm">
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Memories List */}
          <ScrollArea className="h-96">
            <div className="space-y-3">
              {loading && memories.length === 0 ? (
                <div className="text-center text-gray-500 dark:text-gray-400 py-8">Loading memories...</div>
              ) : (
                <AnimatePresence>
                  {memories
                    .sort((a, b) => b.importance - a.importance)
                    .map((memory) => (
                      <motion.div
                        key={memory.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        className="border rounded-lg p-4 space-y-2"
                      >
                        {editingId === memory.id ? (
                          <div className="space-y-3">
                            <Input
                              value={editForm.content}
                              onChange={(e) => setEditForm({ ...editForm, content: e.target.value })}
                            />
                            <div className="flex gap-2">
                              <select
                                value={editForm.category}
                                onChange={(e) => setEditForm({ ...editForm, category: e.target.value })}
                                className="px-3 py-2 border rounded-md"
                              >
                                {categories.map((cat) => (
                                  <option key={cat} value={cat}>
                                    {cat.replace("_", " ")}
                                  </option>
                                ))}
                              </select>
                              <Input
                                type="number"
                                min="1"
                                max="10"
                                value={editForm.importance}
                                onChange={(e) =>
                                  setEditForm({ ...editForm, importance: Number.parseInt(e.target.value) })
                                }
                                className="w-20"
                              />
                              <Button onClick={saveEdit} size="sm" disabled={loading}>
                                <Save className="w-4 h-4" />
                              </Button>
                              <Button onClick={cancelEdit} variant="outline" size="sm">
                                <X className="w-4 h-4" />
                              </Button>
                            </div>
                          </div>
                        ) : (
                          <>
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <p className="text-sm">{memory.content}</p>
                                <div className="flex items-center gap-2 mt-2">
                                  <span
                                    className={`px-2 py-1 rounded-full text-xs ${categoryColors[memory.category as keyof typeof categoryColors]}`}
                                  >
                                    {memory.category.replace("_", " ")}
                                  </span>
                                  <span className="text-xs text-muted-foreground">
                                    Importance: {memory.importance}/10
                                  </span>
                                  {memory.autoGenerated && (
                                    <span className="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full">
                                      Auto-generated
                                    </span>
                                  )}
                                </div>
                              </div>
                              <div className="flex gap-1">
                                <Button onClick={() => startEdit(memory)} variant="ghost" size="sm" disabled={loading}>
                                  <Edit3 className="w-4 h-4" />
                                </Button>
                                <Button
                                  onClick={() => deleteMemory(memory.id)}
                                  variant="ghost"
                                  size="sm"
                                  className="text-red-500 hover:text-red-700"
                                  disabled={loading}
                                >
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>
                            <p className="text-xs text-muted-foreground">
                              {new Date(memory.timestamp).toLocaleDateString()}
                            </p>
                          </>
                        )}
                      </motion.div>
                    ))}
                </AnimatePresence>
              )}
            </div>
          </ScrollArea>
        </div>
      </DialogContent>
    </Dialog>
  )
}
